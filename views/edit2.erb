<link rel="stylesheet" type="text/css" href="/CETEI.css">
<style>
/** {
    margin: 0;
    padding: 0;
}
.full-width {
    width: 100%;
    min-width: 100%;
    max-width: 100%;
}*/
#editor{
    overflow-y: scroll; width: 100%; height: 100vh; background-color: #b3cab6; color: black}
}

#preview-wrapper{
    overflow-y: scroll; width: 100%; height: 500px; color: black;}
}
.no-padding{
  padding-left: 0 !important;
  padding-right: 0 !important;
}
textarea {
    border: none;
    overflow: auto;
    outline: none;

    -webkit-box-shadow: none;
    -moz-box-shadow: none;
    box-shadow: none;
}

</style>



<div class="container-fluid">
  <div class="row" style="padding: 0;">
    <div class="col-sm-6" style="background-color: #b3cab6; padding-top: 25px; margin: 0; padding-left: 0;">
      <form>
        <textarea id="editor">
<%= @doc %>
        </textarea>
      </form>
    </div>
    <div id="preview-wrapper" class="col-sm-6" style="overflow-y: scroll; height: 700px; color: black;">
      <div id="preview">
      </div>

    </div>
  </div>
</div>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
<script src="CETEI.js"></script>
<script>
var CETEIcean = new CETEI();
var TEI = $("#editor").val();
CETEIcean.makeHTML5(TEI,function(data){
  document.getElementById("preview").appendChild(data);
  CETEIcean.addStyle(document, data)
});

$('#editor').on('input', function() {

  var newText = tei_conversion($("#editor").val(), function(data){
  });
  //console.log(newText);
  $("#preview").html(newText);


});

// custom tei conversion that doesn't repeat registering elements
// code pulled from CETEI library; registering elemeents fucntions is then cut-out
tei_conversion = function(TEI, callback, perElementFn){

  TEI_dom = ( new DOMParser() ).parseFromString(TEI, "text/xml");
  let convertEl = (el) => {
          // Create new element. TEI elements get prefixed with 'tei-',
          // TEI example elements with 'teieg-'. All others keep
          // their namespaces and are copied as-is.
          let newElement;
          let copy = false;
          switch (el.namespaceURI) {
            case "http://www.tei-c.org/ns/1.0":
              newElement = document.createElement("tei-" + el.tagName);
              break;
            case "http://www.tei-c.org/ns/Examples":
              if (el.tagName == "egXML") {
                newElement = document.createElement("teieg-" + el.tagName);
                break;
              }
            case "http://relaxng.org/ns/structure/1.0":
              newElement = document.createElement("rng-" + el.tagName);
              break;
            default:
              newElement = document.importNode(el, false);
              copy = true;
          }
          // Copy attributes; @xmlns, @xml:id, @xml:lang, and
          // @rendition get special handling.
          for (let att of Array.from(el.attributes)) {
              if (!att.name.startsWith("xmlns") || copy) {
                newElement.setAttribute(att.name, att.value);
              } else {
                if (att.name == "xmlns")
                newElement.setAttribute("data-xmlns", att.value); //Strip default namespaces, but hang on to the values
              }
              if (att.name == "xml:id" && !copy) {
                newElement.setAttribute("id", att.value);
              }
              if (att.name == "xml:lang" && !copy) {
                newElement.setAttribute("lang", att.value);
              }
              if (att.name == "rendition") {
                newElement.setAttribute("class", att.value.replace(/#/g, ""));
              }
          }
          // Preserve element name so we can use it later
          newElement.setAttribute("data-teiname", el.localName);
          // If element is empty, flag it
          if (el.childNodes.length == 0) {
            newElement.setAttribute("data-empty", "");
          }
          // Turn <rendition scheme="css"> elements into HTML styles
          if (el.localName == "tagsDecl") {
            let style = document.createElement("style");
            for (let node of Array.from(el.childNodes)){
              if (node.nodeType == Node.ELEMENT_NODE && node.localName == "rendition" && node.getAttribute("scheme") == "css") {
                let rule = "";
                if (node.hasAttribute("selector")) {
                  //rewrite element names in selectors
                  rule += node.getAttribute("selector").replace(/([^#, >]+\w*)/g, "tei-$1").replace(/#tei-/g, "#") + "{\n";
                  rule += node.textContent;
                } else {
                  rule += "." + node.getAttribute("xml:id") + "{\n";
                  rule += node.textContent;
                }
                rule += "\n}\n";
                style.appendChild(document.createTextNode(rule));
              }
            }
            if (style.childNodes.length > 0) {
              newElement.appendChild(style);
              this.hasStyle = true;
            }
          }
          // Get prefix definitions
          if (el.localName == "prefixDef") {
            this.prefixes.push(el.getAttribute("ident"));
            this.prefixes[el.getAttribute("ident")] =
              {"matchPattern": el.getAttribute("matchPattern"),
              "replacementPattern": el.getAttribute("replacementPattern")};
          }
          for (let node of Array.from(el.childNodes)){
              if (node.nodeType == Node.ELEMENT_NODE) {
                  newElement.appendChild(  convertEl(node)  );
              }
              else {
                  newElement.appendChild(node.cloneNode());
              }
          }
          if (perElementFn) {
            perElementFn(newElement);
          }
          return newElement;
      }

      html = convertEl(TEI_dom.documentElement);
      //console.log(html);
      return html;

}
</script>
